<!DOCTYPE html>
<html>
  <head>
    <style type="text/css">
        #map {
            width: 95%;
            height: 100%;
        }
        html, 
        body {
            height: 100%;
        }
        #panel {
            width: 100%;
            height: 400px;
        }
        .cont {
          position: relative;
          height: 100%;
        }
        .tag {
          float: left;
          position: absolute;
          left: 0px;
          top: 0px;
          z-index: 1000;
        }
    </style>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes">
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css?family=Dancing+Script&display=swap" rel="stylesheet">
    <title>LifeLine</title>
    <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
  </head>
  <body style="margin: 0px;">
    <nav class="navbar navbar-expand-lg navbar-light bg-danger" >
      <a class="navbar-brand text-white" href="#" style="font-family: 'Montserrat', sans-serif;">
        <img src="images/logo.png" height="35px">
        LifeLine
      </a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item">
            <a class="nav-link text-white" href="/first">Home Page</a>
          </li>
          <li class="nav-item">
            <a class="nav-link text-white" href="/logout">Logout</a>
          </li>
        </ul>
        
      </div>
    </nav>
    <div class="cont">
        <div id="map" style="width:100%;"></div>
        <div id="panel"></div>
    </div>

    
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <script type="text/javascript">
      /**
       * Calculates and displays a car route from the Brandenburg Gate in the centre of Berlin
       * to Friedrichstraße Railway Station.
       *
       * A full list of available request parameters can be found in the Routing API documentation.
       * see:  http://developer.here.com/rest-apis/documentation/routing/topics/resource-calculate-route.html
       *
       * @param   {H.service.Platform} platform    A stub class to access HERE services
       */
      function getQueryStringValue (key) {  
         return decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent(key).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));  
      }  
      function calculateRouteFromAtoB (platform) {

        var router = platform.getRoutingService(),
          routeRequestParams = {
            mode: 'fastest;car',
            representation: 'display',
            routeattributes : 'waypoints,summary,shape,legs',
            maneuverattributes: 'direction,action',
            waypoint0: getQueryStringValue("x1")+','+getQueryStringValue("y1"), // Brandenburg Gate
            waypoint1: getQueryStringValue("x2")+','+getQueryStringValue("y2")  // Friedrichstraße Railway Station
          };


        router.calculateRoute(
          routeRequestParams,
          onSuccess,
          onError
        );
      }
      /**
       * This function will be called once the Routing REST API provides a response
       * @param  {Object} result          A JSONP object representing the calculated route
       *
       * see: http://developer.here.com/rest-apis/documentation/routing/topics/resource-type-calculate-route.html
       */
      function onSuccess(result) {
        var route = result.response.route[0];
       /*
        * The styling of the route response on the map is entirely under the developer's control.
        * A representitive styling can be found the full JS + HTML code of this example
        * in the functions below:
        */
        addRouteShapeToMap(route);
        addManueversToMap(route);

        addWaypointsToPanel(route.waypoint);
        addManueversToPanel(route);
        addSummaryToPanel(route.summary);
        // ... etc.
      }

      /**
       * This function will be called if a communication error occurs during the JSON-P request
       * @param  {Object} error  The error message received.
       */
      function onError(error) {
        alert('Can\'t reach the remote server');
      }

        /**
         * Boilerplate map initialization code starts below:
         */

         // set up containers for the map  + panel
        var mapContainer = document.getElementById('map'),
          routeInstructionsContainer = document.getElementById('panel');

        //Step 1: initialize communication with the platform
        // In your own code, replace variable window.apikey with your own apikey
        var platform = new H.service.Platform({
          apikey: 'Ht0V9hgENzHzVOgMjgihwlkAam5zNSImBii4R5oGXaM'
        });
        var defaultLayers = platform.createDefaultLayers();

        //Step 2: initialize a map - this map is centered over Europe
        var map = new H.Map(document.getElementById('map'),
          defaultLayers.vector.normal.map,{
          center: {lat:50, lng:5},
          zoom: 4,
          pixelRatio: window.devicePixelRatio || 1
        });
        // add a resize listener to make sure that the map occupies the whole container
        window.addEventListener('resize', () => map.getViewPort().resize());

        //Step 3: make the map interactive
        // MapEvents enables the event system
        // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
        var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

        // Create the default UI components
        var ui = H.ui.UI.createDefault(map, defaultLayers);

        // Hold a reference to any infobubble opened
        var bubble;

        /**
         * Opens/Closes a infobubble
         * @param  {H.geo.Point} position     The location on the map.
         * @param  {String} text              The contents of the infobubble.
         */
        function openBubble(position, text){
         if(!bubble){
            bubble =  new H.ui.InfoBubble(
              position,
              // The FO property holds the province name.
              {content: text});
            ui.addBubble(bubble);
          } else {
            bubble.setPosition(position);
            bubble.setContent(text);
            bubble.open();
          }
        }

        /**
         * Creates a H.map.Polyline from the shape of the route and adds it to the map.
         * @param {Object} route A route as received from the H.service.RoutingService
         */
        function addRouteShapeToMap(route){
          var lineString = new H.geo.LineString(),
            routeShape = route.shape,
            polyline;

          routeShape.forEach(function(point) {
            var parts = point.split(',');
            lineString.pushLatLngAlt(parts[0], parts[1]);
          });

          polyline = new H.map.Polyline(lineString, {
            style: {
              lineWidth: 4,
              strokeColor: 'rgba(0, 128, 255, 0.7)'
            }
          });
          // Add the polyline to the map
          map.addObject(polyline);
          // And zoom to its bounding rectangle
          map.getViewModel().setLookAtData({
            bounds: polyline.getBoundingBox()
          });
        }
/**
 * Creates a series of H.map.Marker points from the route and adds them to the map.
 * @param {Object} route  A route as received from the H.service.RoutingService
 */
function addManueversToMap(route){
    var group = new  H.map.Group();
    var i;
    var j;

  // Add a marker for each maneuver
  for (i = 0;  i < route.leg.length; i += 1) {
    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
      // Get the next maneuver.
      maneuver = route.leg[i].maneuver[j];
      // Add a marker to the maneuvers group
      var marker =  new H.map.Marker({
        lat: maneuver.position.latitude,
        lng: maneuver.position.longitude});
      marker.instruction = maneuver.instruction;
      group.addObject(marker);
    }
  }

  group.addEventListener('tap', function (evt) {
    map.setCenter(evt.target.getGeometry());
    openBubble(
       evt.target.getGeometry(), evt.target.instruction);
  }, false);

  // Add the maneuvers group to the map
  map.addObject(group);
}


/**
 * Creates a series of H.map.Marker points from the route and adds them to the map.
 * @param {Object} route  A route as received from the H.service.RoutingService
 */
function addWaypointsToPanel(waypoints){



  var nodeH3 = document.createElement('h3'),
    waypointLabels = [],
    i;


   for (i = 0;  i < waypoints.length; i += 1) {
    waypointLabels.push(waypoints[i].label)
   }

   nodeH3.textContent = waypointLabels.join(' - ');

  routeInstructionsContainer.innerHTML = '';
  routeInstructionsContainer.appendChild(nodeH3);
}

/**
 * Creates a series of H.map.Marker points from the route and adds them to the map.
 * @param {Object} route  A route as received from the H.service.RoutingService
 */
function addSummaryToPanel(summary){ var summaryDiv = document.createElement('div'),
   content = '';
   content += 'Total distance: ' + summary.distance  + 'm. ';
content += 'Travel Time: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


  summaryDiv.style.fontSize = 'small';
  summaryDiv.style.marginLeft ='5%';
  summaryDiv.style.marginRight ='5%';
  summaryDiv.innerHTML = content;
  routeInstructionsContainer.appendChild(summaryDiv);
}

/**
 * Creates a series of H.map.Marker points from the route and adds them to the map.
 * @param {Object} route  A route as received from the H.service.RoutingService
 */
function addManueversToPanel(route){



  var nodeOL = document.createElement('ol'),
    i,
    j;

  nodeOL.style.fontSize = 'small';
  nodeOL.style.marginLeft ='5%';
  nodeOL.style.marginRight ='5%';
  nodeOL.className = 'directions';

     // Add a marker for each maneuver
  for (i = 0;  i < route.leg.length; i += 1) {
    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
      // Get the next maneuver.
      maneuver = route.leg[i].maneuver[j];

      var li = document.createElement('li'),
        spanArrow = document.createElement('span'),
        spanInstruction = document.createElement('span');

      spanArrow.className = 'arrow '  + maneuver.action;
      spanInstruction.innerHTML = maneuver.instruction;
      li.appendChild(spanArrow);
      li.appendChild(spanInstruction);

      nodeOL.appendChild(li);
    }
  }

  routeInstructionsContainer.appendChild(nodeOL);
}


Number.prototype.toMMSS = function () {
  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
}

// Now use the map as required...
calculateRouteFromAtoB (platform);


    </script>
  </body>
</html>
